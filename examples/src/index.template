<!DOCTYPE html>
<html lang="ru">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link href="js/themes/dark-hive/jquery-ui.css" rel="stylesheet" />
    <link href="js/themes/dark-hive/theme.css" rel="stylesheet" />
    <link href="js/jquery-ui-fix.css" rel="stylesheet" />

    <script type="text/javascript" src="js/jquery-3.7.1.min.js"></script>
    <script type="text/javascript" src="js/jquery-ui.js"></script>
    <script type="text/javascript" src="js/jquery-ui-fix.js"></script>

    <script type="module" src="nk-radio/index.mjs"></script>
    
    <title>wasmFreeQueue test html page</title>

<!--
    <audio id="audiostream" crossorigin="anonymous" preload="metadata" 
        src="https://hermitage.hostingradio.ru/hermitage128.mp3">��� ������� �� ������������ ������� <code>audio</code>.
    </audio>
-->

    <style></style>

    <script type="module">
		import FreeQueue from "./free-queue/free-queue.js"
		import initWasmFreeQueue from "./free-queue/free-queue.asm.js"
		try {
			window["Module"] = {};
			initWasmFreeQueue(window["Module"]);
			window["onFreeQueueInitialize"] = () => {
				const GetFreeQueueThreads = window["Module"].cwrap('GetFreeQueueThreads','number',[ '' ]);
				const GetFreeQueuePointers = window["Module"].cwrap('GetFreeQueuePointers','number',[ 'number', 'string' ]);
				const PrintQueueInfo = window["Module"].cwrap('PrintQueueInfo','',[ 'number' ]);
				const CreateFreeQueue = window["Module"].cwrap('CreateFreeQueue','number',[ 'number', 'number' ]);
				const PrintQueueAddresses = window["Module"].cwrap('PrintQueueAddresses','',[ 'number' ]);
				window["instance"] = GetFreeQueueThreads();
				const bufferLengthPtr = GetFreeQueuePointers( window["instance"], "buffer_length" );
				const channelCountPtr = GetFreeQueuePointers( window["instance"], "channel_count" );
				const statePtr = GetFreeQueuePointers( window["instance"], "state" );
				const channelDataPtr = GetFreeQueuePointers( window["instance"], "channel_data" );
				const pointers = new Object();
				pointers.memory = window["Module"].HEAPU8;
				pointers.bufferLengthPointer = bufferLengthPtr;
				pointers.channelCountPointer = channelCountPtr;
				pointers.statePointer = statePtr;
				pointers.channelDataPointer = channelDataPtr;
				window["queue"] = FreeQueue.fromPointers( pointers );
				if ( window["queue"] != undefined ) window["queue"].printAvailableReadAndWrite();
			};
			window["Module"].onRuntimeInitialized = () => { 				
				window["queue"] = undefined;
				window["instance"] = undefined;
				window["Module"].callMain("");
				window.onFreeQueueInitialize();
			};
		} 
		catch( e ) 
		{
			console.log( "exception: " + e );
			throw( e );
		}
    </script>

    <script type="module">
		jQuery(document).ready(function () {
			$('#startTest1').click(function() {
				const CreateFreeQueueThreads = window["Module"].cwrap('CreateFreeQueueThreads','number',[ '' ]);
				const r = CreateFreeQueueThreads();
				if ( r == 1 ) {
					window.onFreeQueueInitialize();
				}
			});
			$('#startTest2').click(function() {
				const DestroyFreeQueueThreads = window["Module"].cwrap('DestroyFreeQueueThreads','number',[ '' ]);
				const r = DestroyFreeQueueThreads();
				if ( r == 1 ) {
					window["queue"] = undefined;
					window["instance"] = undefined;
				}
			});
			$('#startTest3').click(function() {
				const PrintQueueInfo = window["Module"].cwrap('PrintQueueInfo','',[ 'number' ]);
				if ( window["instance"] != undefined ) {	
					PrintQueueInfo( window["instance"] );
					if ( window["queue"] != undefined ) window["queue"].printAvailableReadAndWrite();
				}
			});
			$('#startTest4').click(function() {
				const PrintQueueInfo = window["Module"].cwrap('PrintQueueInfo','',[ 'number' ]);
				const d = [2];
				let bufferSize = window["samplerate"] / 25;
				d[0] = new Float64Array(bufferSize);
				d[1] = new Float64Array(bufferSize);
				if ( window["queue"] != undefined ) {
					const r = window["queue"].pull( d, bufferSize );
					console.log( "pull: " + r );
					console.log( "pull data: " + d );
					window["queue"].printAvailableReadAndWrite();
				}
			});
			$('#startTest5').click(function() {
				if ( window["isPlaybackInProgress"] == false ) {
					window.startplayback();
				}
			});
			$('#startTest6').click(function() {
				if ( window["isPlaybackInProgress"] == true ) {
					window.stopplayback();
				}
			});
		});
    </script>
</head>

<body>
	<div class="nk-radio"><slot name="nk-radio"></slot></div>

        <nk-radio slot="nk-radio" data-field="settings-2" data-services-path="webgpu"></nk-radio>

	<button id="startTest1">CreateThreads</button>
	<button id="startTest2">DestroyThreads</button>
	<button id="startTest3">PrintVarStack</button>
	<button id="startTest4">PullData</button>
	<button id="startTest5">StartPlayback</button>
	<button id="startTest6">StopPlayback</button>
</body>

</html>
</html>